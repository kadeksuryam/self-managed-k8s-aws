- hosts: localhost
  tasks:
    - name: Get Kubernetes Public IP
      shell: terraform output k8s_address
      args:
        chdir: ../
      register: k8s_public_ip


- hosts: controllers
  remote_user: ubuntu
  tasks:
    - name: Create Kubernetes Config Dir
      shell: sudo mkdir -p /etc/kubernetes/config
    - name: Download & Install Kubernetes Controller Binaries
      shell: |
        wget -q --show-progress --https-only --timestamping \
        "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-apiserver" \
        "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-controller-manager" \
        "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-scheduler" \
        "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl"
        chmod +x kube-apiserver kube-controller-manager kube-scheduler kubectl
        sudo mv kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/local/bin/
    - name: Configure the Kubernetes API Server
      shell: |
        sudo mkdir -p /var/lib/kubernetes/
        sudo mv ca.pem ca-key.pem api-server-key.pem api-server.pem \
        service-account-key.pem service-account.pem \
        encryption-config.yaml /var/lib/kubernetes/
    - name: Create the kube-apiserver.service systemd unit file
      shell: |
        export KUBERNETES_PUBLIC_ADDRESS={{ hostvars['localhost']['k8s_public_ip']['stdout'] }}
        export INTERNAL_IP=$(hostname -I)
        cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-apiserver \\
          --advertise-address=${INTERNAL_IP} \\
          --allow-privileged=true \\
          --apiserver-count=3 \\
          --audit-log-maxage=30 \\
          --audit-log-maxbackup=3 \\
          --audit-log-maxsize=100 \\
          --audit-log-path=/var/log/audit.log \\
          --authorization-mode=Node,RBAC \\
          --bind-address=0.0.0.0 \\
          --client-ca-file=/var/lib/kubernetes/ca.pem \\
          --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
          --etcd-cafile=/var/lib/kubernetes/ca.pem \\
          --etcd-certfile=/var/lib/kubernetes/api-server.pem \\
          --etcd-keyfile=/var/lib/kubernetes/api-server-key.pem \\
          --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379,https://10.240.0.12:2379 \\
          --event-ttl=1h \\
          --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
          --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
          --kubelet-client-certificate=/var/lib/kubernetes/api-server.pem \\
          --kubelet-client-key=/var/lib/kubernetes/api-server-key.pem \\
          --runtime-config='api/all=true' \\
          --service-account-key-file=/var/lib/kubernetes/service-account.pem \\
          --service-account-signing-key-file=/var/lib/kubernetes/service-account-key.pem \\
          --service-account-issuer=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\
          --service-cluster-ip-range=10.32.0.0/24 \\
          --service-node-port-range=30000-32767 \\
          --tls-cert-file=/var/lib/kubernetes/api-server.pem \\
          --tls-private-key-file=/var/lib/kubernetes/api-server-key.pem \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

    - name: Create the kube-controller-manager.service systemd unit file
      shell: |
        sudo mv kube-controller-manager.kubeconfig /var/lib/kubernetes/
        cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-controller-manager \\
          --bind-address=0.0.0.0 \\
          --cluster-cidr=10.200.0.0/16 \\
          --cluster-name=kubernetes \\
          --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\
          --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\
          --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \\
          --leader-elect=true \\
          --root-ca-file=/var/lib/kubernetes/ca.pem \\
          --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \\
          --service-cluster-ip-range=10.32.0.0/24 \\
          --use-service-account-credentials=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    
    - name: Create the kube-controller-manager.service systemd unit file
      shell: |
        sudo mv kube-scheduler.kubeconfig /var/lib/kubernetes/

        cat <<EOF | sudo tee /etc/kubernetes/config/kube-scheduler.yaml
        apiVersion: kubescheduler.config.k8s.io/v1beta1
        kind: KubeSchedulerConfiguration
        clientConnection:
          kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
        leaderElection:
          leaderElect: true
        EOF

        cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-scheduler \\
          --config=/etc/kubernetes/config/kube-scheduler.yaml \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

    - name: Start the Controller Services
      shell: |
        sudo systemctl daemon-reload
        sudo systemctl enable kube-apiserver kube-controller-manager kube-scheduler
        sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler

    - name: RBAC for Kubelet Authorization
      shell: |
        cat <<EOF | kubectl apply --kubeconfig admin.kubeconfig -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          annotations:
            rbac.authorization.kubernetes.io/autoupdate: "true"
          labels:
            kubernetes.io/bootstrapping: rbac-defaults
          name: system:kube-apiserver-to-kubelet
        rules:
          - apiGroups:
              - ""
            resources:
              - nodes/proxy
              - nodes/stats
              - nodes/log
              - nodes/spec
              - nodes/metrics
            verbs:
              - "*"
        EOF
        cat <<EOF | kubectl apply --kubeconfig admin.kubeconfig -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: system:kube-apiserver
          namespace: ""
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:kube-apiserver-to-kubelet
        subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: kubernetes
        EOF
      run_once: true